缺陷：

var 没有块级作用域
for 循环

es6:
let 变量定义方式    有块级作用域

let a   a不是window上的   不会污染window

let  重复定义会报错

let  预定义。预先解释   console.log(a);let a = "a"

const  定义变量。不能修改

const obj = {x:1,y:2}--引用类型  obj 他是一个地址 。。没有改变obj地址存在  obj.x = 4; console.log(obj)  => {x:4,y:2} --    如果是是这样 obj = {a:1} 就会报错 他是一个不能改的东西
------
babel 编译写

//cho - 稳定版  开发班。 测试版 。 金丝雀  -- 一个不如一个不稳定。。

/*--闭包--*/
es6 --  {}  就是花括号

/*--2结构赋值--*/

结构赋值-变量的批量赋值

结构赋值-把右侧的数据类型赋值到左侧构造的相似的数据类型中
hbuild

/*--3函数--*/
for 循环简写

箭头函数。。在性能上没有什么改变。

this. 函数运行时候的上下文


{}
1:作用域
2：定义对象


//文字在计算机看到的是一张图片。一个画面。通过系统一个按钮渲染层一个画面。。画面比较占流量。。带宽不够用。就有了编码这个概念。。
//传给你一片数字。-》然后解析完-》显示屏。画面。。
//ascii码表  -- 0 --1  --   字节、位
// 8个位置    2的8次方组合。。。存256种信息   第一个位是0
// 拓展 ascii  第一位是1
//中日韩文字比较复杂。  4个自己  。unicode--   2*32次方
//utf8  主要用于网络传输。。减少带宽。。
//
//写的时候用  unicode /utf8

//node+webpack  ===>reactnative

//<!--reactnative-->
//好处：公用同一套代码。改动方便
//问题1：性能问题
//ios 比 ad  性能好  。在底层封装了一层
// art  模式    htm5调用的是浏览器的api

//reactnative --  用了一个虚拟dom     ---  js操作dom的时候阻塞了。。  是异步阻塞的
//facebook  -- 开发reactnative    调用系统级别的
//dom是浏览器的api  webview的组件  浏览器的克子


//白鹭引擎   业界比较火的引擎  -- 解决动画游戏问题  运行问题

//vue  仅仅在浏览器上实现的机制
v8是google   --解决js快慢的问题


emoji  表情包  一种字符。这种字符被编码到unicode里面，，苹果推这个推的的比较紧

console.log(emoji,emoji.length,emoji.codePointAt(0));
let emoji = "\uD83d\uDE02"; //笑脸
let es6EmojiCode = "\u{1f602}";

console.log(emoji,emoji.length,emoji.codePointAt(0));//  , 2,

emoji.charCodeAt(0);
String.prototype.at || String.prototype.at = function () {
}

let es5Str = String.fromCharCode(0x1f602);
let es6Str = String.fromCodePoint(0x1f602);


Number.parseFloat


//--
let str = "javascript is the best language";
let isFind = str.includes("s",5);
let index = str.indexOf("s",5);
console.log(isFind,index);


polyfill(兼容旧浏览器)


/////////------------------------reactnative-----------------------//////

html5应用替代原生的应用
html5调用的浏览器的api  .  所以很慢。不是系统本身的的api
迫使改动很小。又能在多个端运用，性能问题，调用的不是安卓 ios底层的api..
安卓-apk  -》 转成二进制   ios 比安卓块

安卓底层是用java写的一个环节

。。慢的不是javascript 而是dom ,js操作dom的时候阻塞了。 是异步阻塞的。调用的是dom的api

js的性能问题。靠reactnative解决
reactnative：它是通过虚拟出一个dom。在内存里搞了一个虚拟的dom树。。


业界比较火的。。。白鹭引擎。。javascript引擎  --  解决动画问题
v8是google做的。。解决js快慢问题
vue 虚拟的dom 在浏览器上的一个机制。。并没有在ios、安卓上实行。。

..


if --else  是逻辑。不是表达式

es6+ react + nodecall



、、、、、、、、、、、、、、、、、、、、
//////////////////////////////---数组

Array
把类数组转化成数组


//线性。 下标。0---1
//非线性
//对象不能转化成数组  是哈希的


///promise  ->输入是一个function   ->输出是一个 实例


//
let p = new Promise((resolve, reject) => {
    setTimeout(() => {
        console.log(123);
        resolve(123);
    },1000);
});

p.then(() => {
    console.log('sucss');
}).catch(() => {
});

//有resolve的时候执行 then   /  reject的时候 执行 catch










































